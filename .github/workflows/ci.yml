name: CI build & push (todolist-app)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write   # สร้าง/อัปเดต git tag
  packages: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # ----------------------------------------------------------
  # 1) Compute next version (แต่ "ยังไม่" สร้าง tag) — ใช้เลขนี้ตลอดทั้งรัน
  # ----------------------------------------------------------
  compute_version:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.calc.outputs.VERSION_TAG }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - run: git fetch --tags --force
      - id: calc
        shell: bash
        run: |
          set -euo pipefail
          LAST_TAG="$(git describe --tags --abbrev=0 2>/dev/null || echo 'v1.0.0')"
          CLEAN_LAST="${LAST_TAG#v}"
          IFS='.' read -r MAJ MIN PAT <<< "$CLEAN_LAST"
          NEXT="v${MAJ}.${MIN}.$((PAT+1))"
          # กันกรณีชน tag จากรอบก่อน
          while git rev-parse -q --verify "refs/tags/${NEXT}" >/dev/null; do
            IFS='.' read -r MAJ MIN PAT <<< "${NEXT#v}"
            NEXT="v${MAJ}.${MIN}.$((PAT+1))"
          done
          echo "VERSION_TAG=${NEXT#v}" >> "$GITHUB_OUTPUT"

  # ----------------------------------------------------------
  # 2) BUILD-ONLY ทั้งสองภาพ (ไม่ push) — ถ้าภาพใด fail ให้ล้มทั้งงาน
  # ----------------------------------------------------------
  build_only:
    runs-on: ubuntu-latest
    needs: [compute_version]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      fail-fast: true
      matrix:
        include:
          - name: my-app
            context: ./my-app
          - name: tasks-api
            context: ./api
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: docker/setup-buildx-action@v3

      - name: Assert Dockerfile exists
        shell: bash
        run: |
          test -f "${{ matrix.context }}/Dockerfile" || \
          (echo "❌ ไม่พบ Dockerfile ใน ${{ matrix.context }}"; exit 1)

      - name: Build only (no push)
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          push: false
          provenance: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ----------------------------------------------------------
  # 3) PUSH ทั้งสองภาพ (ใช้ cache จากเฟสก่อน) — ติด tag เดียว 1.0.x
  #    รันก็ต่อเมื่อ build_only ทั้งคู่ผ่าน
  # ----------------------------------------------------------
  push_images:
    runs-on: ubuntu-latest
    needs: [compute_version, build_only]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        include:
          - name: my-app
            context: ./my-app
            image: registry.nipa.cloud/front-test-1/my-app
          - name: tasks-api
            context: ./api
            image: registry.nipa.cloud/front-test-1/tasks-api
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Set VERSION_TAG
        run: echo "VERSION_TAG=${{ needs.compute_version.outputs.version_tag }}" >> "$GITHUB_ENV"

      - uses: docker/login-action@v3
        with:
          registry: registry.nipa.cloud
          username: ${{ secrets.NIPA_REGISTRY_USERNAME }}
          password: ${{ secrets.NIPA_REGISTRY_PASSWORD }}

      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.image }}
          tags: |
            type=raw,value=${{ env.VERSION_TAG }}

      - uses: docker/setup-buildx-action@v3

      - name: Push image (${{ matrix.name }})
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          push: true
          provenance: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha        # ทำให้รอบ push เร็วขึ้นเพราะรีบิวด์จาก cache
          cache-to: type=gha,mode=max

  # ----------------------------------------------------------
  # 4) CREATE TAG ใน Git — ทำหลัง push สำเร็จครบทุกภาพ
  # ----------------------------------------------------------
  create_git_tag:
    runs-on: ubuntu-latest
    needs: [compute_version, push_images]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && success()
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - run: |
          VERSION="${{ needs.compute_version.outputs.version_tag }}"
          git fetch --tags --force
          if git rev-parse -q --verify "refs/tags/v${VERSION}" >/dev/null; then
            echo "Tag v${VERSION} มีอยู่แล้ว — ข้าม"
            exit 0
          fi
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${VERSION}" -m "ci: release v${VERSION}"
          git push origin "v${VERSION}"

  # ----------------------------------------------------------
  # 5) PR: build เพื่อตรวจสอบเท่านั้น (ไม่ push, ไม่สร้าง tag)
  # ----------------------------------------------------------
  pr-build-only:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: my-app
            context: ./my-app
          - name: tasks-api
            context: ./api
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Assert Dockerfile exists
        run: |
          test -f "${{ matrix.context }}/Dockerfile" || \
          (echo "❌ ไม่พบ Dockerfile ใน ${{ matrix.context }}"; exit 1)
      - uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          push: false
          provenance: false
          cache-from: type=gha
          cache-to: type=gha,mode=max
